set nocompatible
filetype off

filetype plugin indent on    " required

set path=.

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'ntpeters/vim-better-whitespace'
Plug 'tpope/vim-eunuch'
Plug 'raimondi/delimitmate'
Plug 'terryma/vim-multiple-cursors'
Plug 'Yggdroot/indentLine'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'mhinz/vim-startify'
Plug 'nanotech/jellybeans.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'ctrlpvim/ctrlp.vim'

call plug#end()

"--------------------------------------------------
" Basic setup
"--------------------------------------------------
set backspace=indent,eol,start
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8
set tabstop=2
set shiftwidth=2
set expandtab
set wrap!
set guifont=SauceCodePro\ Nerd\ Font:h14
set t_Co=256
set exrc
set secure
set autoread
highlight Normal ctermbg=NONE
highlight NonText ctermbg=NONE
syntax enable
colorscheme jellybeans
set background=dark
set number
set showmatch
set dir=~/.vimswap//,/var/tmp//,/tmp//,.
set clipboard=unnamed
set previewheight=100
set conceallevel=0
set spell spelllang=en_us
set hlsearch
set ignorecase

"--------------------------------------------------
" Plugin Specific Configuration
"--------------------------------------------------
set laststatus=2

let g:ale_linters = {'javascript': ['eslint'], 'java': ['javac']}

let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0

let g:indentLine_enabled = 1
let g:indent_guides_enable_on_vim_startup = 1

let g:tagbar_autofocus=1
let g:tagbar_autoclose=1

let g:airline_powerline_fonts=1

let NERDTreeShowHidden=1
let NERDTreeChDirMode=0

let g:gutentags_ctags_extra_args=["--options=" . $HOME . "/.ctags"]
let g:gutentags_project_root = ['tags']
let g:startify_change_to_dir=0

" -------------------------------------------------
" Mappings
" -------------------------------------------------
let mapleader=" "
:map <C-a> GVgg
:map <C-c> y
:map <C-v> p
:map <C-x> "_d
:map <C-z> u
:map <C-]> g<C-]>
:imap <C-s> <Esc>:w<Enter>
:map <C-s> <Esc>:w<Enter>
:nmap riw viwp

" Remapping the movement keys so I can stay on home row as much as possible.
noremap ; l
noremap l k
noremap k j
noremap j h


"==================================================
" Splits
"==================================================
:map <leader>sv	:vsplit<Enter>
:map <leader>sh	:split<Enter>

:map f; <C-w>l
:map fl <C-w>k
:map fk <C-w>j
:map fj <C-w>h

"==================================================
" Buffers
"==================================================
noremap q :q<Enter>
:map <leader>qa :qa<Enter>
:map <leader>qaf :!qa<Enter>
:map <leader>h :Startify<Enter>

"==================================================
" Tabs
"==================================================
:map <leader>t :tabe<Enter>

:map gj :tabprevious<Enter>
:map g; :tabnext<Enter>

"==================================================
" Tags
"==================================================
:map <leader>tt :TagbarToggle<Enter>

" Open up a tag browser
:map <leader>tbv :execute "vertical ptag " . expand("<cword>")<Enter>
:map <leader>tb :execute "ptag " . expand("<cword>")<Enter>
:map <leader>tn :ptnext<Enter>
:map <leader>tp :ptprevious<Enter>
:map tc <C-w>z

"==================================================
" Vimrc
"==================================================

" Open vimrc
:map <leader>vo :tabe ~/.vimrc<Enter>

" Reload vimrc
:map <leader>vr :so %<Enter>

"==================================================
" File Operations
"==================================================

" Open File Search
:map <leader>fs :Files<Enter>

" Open file navigation
:map <leader>ft :NERDTreeToggle <Enter>

" Reveal current buffer file in navigation.
:map <leader>ff :NERDTreeFind<Enter>

"==================================================
" Text search
"==================================================
:nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" Buffer search, cursor
:map <leader>sb /\c<C-r><C-w><Enter>

" Project search, prompt
:map <leader>sp :Ag<Space>

" Project search, cursor
:map <leader>sP :Ag<Space><C-r><C-w><Enter>

" Recently used files
let g:startify_lists = [{ 'type': 'dir',       'header': ['   MRU '. getcwd()] }]

:map <leader>h :History<Enter>

" Custom Ag command
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%'),
  \                 <bang>0)

let g:fzf_colors =
\ { 'fg': ['fg', 'Normal'],
\ 'bg': ['bg', 'Normal']}

"==================================================
" Git
"==================================================
:map <leader>gs :Gstatus<Enter>

" Tags

" Format JSON using Python
:map <leader>fj :%!python -m json.tool<Enter>

" Duplicate line
:map <leader>dl <S-v>yp

"--------------------------------------------------
" Autocmds
"--------------------------------------------------

" Make sure .inc files get PHP syntax highlighting
autocmd BufEnter,BufNew *.inc set syntax=PHP

let g:tagbar_type_typescript = {
  \ 'ctagsbin' : 'tstags',
  \ 'ctagsargs' : '-f-',
  \ 'kinds': [
    \ 'e:enums:0:1',
    \ 'f:function:0:1',
    \ 't:typealias:0:1',
    \ 'M:Module:0:1',
    \ 'I:import:0:1',
    \ 'i:interface:0:1',
    \ 'C:class:0:1',
    \ 'm:method:0:1',
    \ 'p:property:0:1',
    \ 'v:variable:0:1',
    \ 'c:const:0:1',
  \ ],
  \ 'sort' : 0
\ }

let test#strategy = "dispatch"
